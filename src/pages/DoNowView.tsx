import { useState, useMemo } from 'react';
import {
  Container,
  Title,
  Text,
  Stack,
  Card,
  Group,
  Badge,
  Button,
  Progress,
  Paper,
  Alert,
  Divider,
  Grid,
  ThemeIcon
} from '@mantine/core';
import { 
  IconClock, 
  IconAlertTriangle, 
  IconBrain,
  IconTarget,
  IconFlame,
  IconCheckbox,
  IconBolt,
  IconTrendingUp
} from '@tabler/icons-react';
import { notifications } from '@mantine/notifications';
import { useEventStore } from '../store/eventStore';
import type { AcademicEvent } from '../types';
import dayjs from '../utils/dayjs';

interface TaskWithPriority extends AcademicEvent {
  aiPriorityScore: number;
  urgencyLevel: 'critical' | 'high' | 'medium' | 'low';
  procrastinationRisk: number;
  timeToDeadline: number;
  estimatedEffort: number;
}

export function DoNowView() {
  const { events, updateEvent } = useEventStore();
  const [completingTask, setCompletingTask] = useState<string | null>(null);

  // AI-powered task prioritization algorithm
  const prioritizedTasks = useMemo(() => {
    const now = dayjs();
    
    return events
      .filter(event => event.status !== 'done')
      .map((event): TaskWithPriority => {
        const deadline = dayjs(event.startTime);
        const timeToDeadline = deadline.diff(now, 'hour');
        
        // AI scoring factors
        const urgencyScore = Math.max(0, 100 - timeToDeadline / 24); // Higher score for closer deadlines
        const typeMultiplier = {
          'deadline': 1.5,
          'project': 1.3,
          'class': 1.0,
          'personal': 0.8
        }[event.type];
        
        const priorityMultiplier = {
          'high': 1.4,
          'medium': 1.0,
          'low': 0.7
        }[event.priority || 'medium'];
        
        // Procrastination risk (higher for deadlines, projects)
        const procrastinationRisk = event.type === 'deadline' ? 85 : 
                                   event.type === 'project' ? 70 : 45;
        
        // Estimated effort (mock AI prediction)
        const estimatedEffort = event.type === 'project' ? 4 : 
                               event.type === 'deadline' ? 2 : 1;
        
        const aiPriorityScore = urgencyScore * typeMultiplier * priorityMultiplier;
        
        let urgencyLevel: 'critical' | 'high' | 'medium' | 'low' = 'low';
        if (timeToDeadline < 24) urgencyLevel = 'critical';
        else if (timeToDeadline < 72) urgencyLevel = 'high';
        else if (timeToDeadline < 168) urgencyLevel = 'medium';
        
        return {
          ...event,
          aiPriorityScore,
          urgencyLevel,
          procrastinationRisk,
          timeToDeadline,
          estimatedEffort
        };
      })
      .sort((a, b) => b.aiPriorityScore - a.aiPriorityScore);
  }, [events]);

  const handleCompleteTask = async (task: TaskWithPriority) => {
    setCompletingTask(task.id);
    try {
      await updateEvent(task.id, { ...task, status: 'done' });
      notifications.show({
        title: 'üéâ Ho√†n th√†nh!',
        message: `B·∫°n ƒë√£ ho√†n th√†nh "${task.title}". Tuy·ªát v·ªùi!`,
        color: 'green'
      });
    } catch (error) {
      notifications.show({
        title: 'L·ªói',
        message: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i task',
        color: 'red'
      });
    } finally {
      setCompletingTask(null);
    }
  };

  const handleStartTask = async (task: TaskWithPriority) => {
    try {
      await updateEvent(task.id, { ...task, status: 'in-progress' });
      notifications.show({
        title: '‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu!',
        message: `ƒê√£ b·∫Øt ƒë·∫ßu l√†m "${task.title}"`,
        color: 'blue'
      });
    } catch (error) {
      notifications.show({
        title: 'L·ªói',
        message: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i task',
        color: 'red'
      });
    }
  };

  const getUrgencyColor = (level: string) => {
    switch (level) {
      case 'critical': return 'red';
      case 'high': return 'orange';
      case 'medium': return 'yellow';
      default: return 'blue';
    }
  };

  const getTimeDisplay = (hours: number) => {
    if (hours < 0) return 'Qu√° h·∫°n';
    if (hours < 24) return `${Math.round(hours)} gi·ªù n·ªØa`;
    const days = Math.round(hours / 24);
    return `${days} ng√†y n·ªØa`;
  };

  const criticalTasks = prioritizedTasks.filter(t => t.urgencyLevel === 'critical');
  const highPriorityTasks = prioritizedTasks.filter(t => t.urgencyLevel === 'high');
  const otherTasks = prioritizedTasks.filter(t => !['critical', 'high'].includes(t.urgencyLevel));

  return (
    <Container size="lg" py="md">
      <Stack gap="lg">
        {/* Header */}
        <Paper p="lg" withBorder radius="md" bg="gradient-to-r from-blue-50 to-indigo-50">
          <Group gap="md">
            <ThemeIcon size={48} radius="md" variant="gradient" gradient={{ from: 'blue', to: 'indigo' }}>
              <IconBrain size={24} />
            </ThemeIcon>
            <div>
              <Title order={1} c="blue">L√†m Ngay</Title>
              <Text c="dimmed" size="lg">
                AI s·∫Øp x·∫øp theo ƒë·ªô ∆∞u ti√™n v√† th√≥i quen tr√¨ ho√£n c·ªßa b·∫°n
              </Text>
            </div>
          </Group>
        </Paper>

        {/* AI Insights */}
        <Grid>
          <Grid.Col span={{ base: 12, md: 4 }}>
            <Card padding="lg" withBorder>
              <Group gap="xs" mb="sm">
                <IconBolt size={20} color="orange" />
                <Text fw={600}>Th·ªëng k√™ AI</Text>
              </Group>
              <Stack gap="xs">
                <Text size="sm">
                  <strong>{prioritizedTasks.length}</strong> task ƒëang ch·ªù
                </Text>
                <Text size="sm">
                  <strong>{criticalTasks.length}</strong> task kh·∫©n c·∫•p
                </Text>
                <Text size="sm">
                  <strong>{Math.round(prioritizedTasks.reduce((acc, t) => acc + t.procrastinationRisk, 0) / prioritizedTasks.length)}%</strong> risk tr√¨ ho√£n trung b√¨nh
                </Text>
              </Stack>
            </Card>
          </Grid.Col>
          
          <Grid.Col span={{ base: 12, md: 8 }}>
            <Card padding="lg" withBorder>
              <Group gap="xs" mb="sm">
                <IconTrendingUp size={20} color="blue" />
                <Text fw={600}>Khuy·∫øn ngh·ªã AI</Text>
              </Group>
              <Text size="sm">
                {criticalTasks.length > 0 
                  ? `üö® T·∫≠p trung v√†o ${criticalTasks.length} task kh·∫©n c·∫•p tr∆∞·ªõc. ƒê·ª´ng ƒë·ªÉ tr√¨ ho√£n!`
                  : highPriorityTasks.length > 0
                  ? `‚ö° B·∫Øt ƒë·∫ßu v·ªõi c√°c task ∆∞u ti√™n cao. B·∫°n c√≥ th·ªÉ ho√†n th√†nh trong h√¥m nay!`
                  : `‚ú® Tuy·ªát v·ªùi! Kh√¥ng c√≥ task kh·∫©n c·∫•p. Th·ªùi gian t·ªët ƒë·ªÉ l√†m c√°c task d√†i h·∫°n.`
                }
              </Text>
            </Card>
          </Grid.Col>
        </Grid>

        {/* Critical Tasks */}
        {criticalTasks.length > 0 && (
          <Stack gap="md">
            <Alert 
              icon={<IconAlertTriangle size={16} />}
              title="üö® KH·∫®N C·∫§P - L√†m ngay!"
              color="red"
              variant="light"
            >
              C√°c task n√†y s·∫Øp qu√° h·∫°n. AI khuy·∫øn ngh·ªã ∆∞u ti√™n tuy·ªát ƒë·ªëi!
            </Alert>
            
            {criticalTasks.map((task) => (
              <Card key={task.id} padding="lg" withBorder radius="md" 
                    style={{ borderLeft: '4px solid var(--mantine-color-red-6)' }}>
                <Stack gap="sm">
                  <Group justify="space-between" align="flex-start">
                    <div style={{ flex: 1 }}>
                      <Group gap="sm" mb="xs">
                        <Text fw={700} size="lg" c="red">
                          {task.title}
                        </Text>
                        <Badge color="red" variant="filled">
                          KH·∫®N C·∫§P
                        </Badge>
                        <Badge color={getUrgencyColor(task.urgencyLevel)} variant="light">
                          AI Score: {Math.round(task.aiPriorityScore)}
                        </Badge>
                      </Group>
                      
                      <Group gap="md" mb="sm">
                        <Group gap="xs">
                          <IconClock size={14} />
                          <Text size="sm" c="red" fw={600}>
                            {getTimeDisplay(task.timeToDeadline)}
                          </Text>
                        </Group>
                        {task.realisticDeadline && (
                          <Group gap="xs">
                            <Text size="xs" c="dimmed">AI deadline:</Text>
                            <Text size="sm" c="orange" fw={500}>
                              {dayjs(task.realisticDeadline).format('DD/MM HH:mm')}
                            </Text>
                          </Group>
                        )}
                        <Text size="sm" c="dimmed">
                          Effort: {task.estimatedEffort}h
                        </Text>
                        <Text size="sm" c="orange">
                          Risk tr√¨ ho√£n: {task.procrastinationRisk}%
                        </Text>
                      </Group>
                      
                      <Progress 
                        value={task.procrastinationRisk} 
                        color="red" 
                        size="sm" 
                        mb="sm"
                      />
                      
                      {task.description && (
                        <Text size="sm" lineClamp={2}>
                          {task.description}
                        </Text>
                      )}
                    </div>
                  </Group>
                  
                  <Group gap="xs">
                    <Button 
                      leftSection={<IconTarget size={16} />}
                      color="red"
                      onClick={() => handleStartTask(task)}
                      disabled={task.status === 'in-progress'}
                    >
                      {task.status === 'in-progress' ? 'ƒêang l√†m' : 'B·∫Øt ƒë·∫ßu ngay'}
                    </Button>
                    
                    <Button 
                      leftSection={<IconCheckbox size={16} />}
                      variant="light"
                      color="green"
                      onClick={() => handleCompleteTask(task)}
                      loading={completingTask === task.id}
                    >
                      Ho√†n th√†nh
                    </Button>
                  </Group>
                </Stack>
              </Card>
            ))}
          </Stack>
        )}

        {/* High Priority Tasks */}
        {highPriorityTasks.length > 0 && (
          <Stack gap="md">
            <Divider 
              label={
                <Group gap="xs">
                  <IconFlame size={16} color="orange" />
                  <Text fw={600} c="orange">∆Øu ti√™n cao</Text>
                </Group>
              }
              labelPosition="left"
            />
            
            {highPriorityTasks.map((task) => (
              <Card key={task.id} padding="md" withBorder radius="md" 
                    style={{ borderLeft: '4px solid var(--mantine-color-orange-6)' }}>
                <Group justify="space-between" align="flex-start">
                  <div style={{ flex: 1 }}>
                    <Group gap="sm" mb="xs">
                      <Text fw={600} size="md">
                        {task.title}
                      </Text>
                      <Badge color="orange" variant="light">
                        ∆Øu ti√™n cao
                      </Badge>
                      <Badge size="sm" variant="outline">
                        AI: {Math.round(task.aiPriorityScore)}
                      </Badge>
                    </Group>
                    
                    <Group gap="md" mb="xs">
                      <Group gap="xs">
                        <IconClock size={14} />
                        <Text size="sm">
                          {getTimeDisplay(task.timeToDeadline)}
                        </Text>
                      </Group>
                      <Text size="sm" c="dimmed">
                        {task.estimatedEffort}h ‚Ä¢ Risk: {task.procrastinationRisk}%
                      </Text>
                    </Group>
                  </div>
                  
                  <Group gap="xs">
                    <Button 
                      size="sm"
                      variant="light"
                      onClick={() => handleStartTask(task)}
                      disabled={task.status === 'in-progress'}
                    >
                      {task.status === 'in-progress' ? 'ƒêang l√†m' : 'B·∫Øt ƒë·∫ßu'}
                    </Button>
                    
                    <Button 
                      size="sm"
                      variant="subtle"
                      color="green"
                      onClick={() => handleCompleteTask(task)}
                      loading={completingTask === task.id}
                    >
                      ‚úì
                    </Button>
                  </Group>
                </Group>
              </Card>
            ))}
          </Stack>
        )}

        {/* Other Tasks */}
        {otherTasks.length > 0 && (
          <Stack gap="md">
            <Divider 
              label={<Text fw={600} c="dimmed">C√°c task kh√°c</Text>}
              labelPosition="left"
            />
            
            <Stack gap="xs">
              {otherTasks.map((task) => (
                <Card key={task.id} padding="sm" withBorder radius="md">
                  <Group justify="space-between" align="center">
                    <div>
                      <Text size="sm" fw={500}>{task.title}</Text>
                      <Text size="xs" c="dimmed">
                        {getTimeDisplay(task.timeToDeadline)} ‚Ä¢ {task.estimatedEffort}h
                      </Text>
                    </div>
                    
                    <Group gap="xs">
                      <Badge size="xs" color={getUrgencyColor(task.urgencyLevel)} variant="light">
                        {Math.round(task.aiPriorityScore)}
                      </Badge>
                      <Button 
                        size="xs" 
                        variant="subtle"
                        onClick={() => handleCompleteTask(task)}
                        loading={completingTask === task.id}
                      >
                        ‚úì
                      </Button>
                    </Group>
                  </Group>
                </Card>
              ))}
            </Stack>
          </Stack>
        )}

        {prioritizedTasks.length === 0 && (
          <Paper p="xl" ta="center" withBorder>
            <Stack align="center" gap="md">
              <IconCheckbox size={48} color="green" />
              <Text size="lg" fw={600} c="green">
                Tuy·ªát v·ªùi! B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ task!
              </Text>
              <Text c="dimmed">
                Th·ªùi gian ngh·ªâ ng∆°i ho·∫∑c l√™n k·∫ø ho·∫°ch cho c√°c task m·ªõi.
              </Text>
            </Stack>
          </Paper>
        )}
      </Stack>
    </Container>
  );
}

import { useState } from 'react';
import {
  Paper,
  Title,
  Text,
  Stack,
  Group,
  Button,
  Card,
  ActionIcon,
  Modal,
  TextInput,
  Badge,
  Alert,
  Progress,
  Box,
  Divider,
  Loader
} from '@mantine/core';
import { 
  IconRobot,
  IconSend,
  IconBrain,
  IconBulb,
  IconTarget
} from '@tabler/icons-react';
import { useForm } from '@mantine/form';
import { notifications } from '@mantine/notifications';
import { useEventStore } from '../store/eventStore';
import dayjs from 'dayjs';

interface AIAssistantMessage {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface StudyTip {
  id: string;
  category: 'time-management' | 'focus' | 'motivation' | 'technique';
  title: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
}

const STUDY_TIPS: StudyTip[] = [
  {
    id: '1',
    category: 'time-management',
    title: 'K·ªπ thu·∫≠t Pomodoro',
    description: 'H·ªçc 25 ph√∫t, ngh·ªâ 5 ph√∫t. Sau 4 chu k·ª≥, ngh·ªâ d√†i 15-30 ph√∫t.',
    priority: 'high'
  },
  {
    id: '2',
    category: 'focus',
    title: 'M√¥i tr∆∞·ªùng h·ªçc t·∫≠p',
    description: 'T·∫°o kh√¥ng gian y√™n tƒ©nh, t·∫Øt th√¥ng b√°o ƒëi·ªán tho·∫°i, chu·∫©n b·ªã ƒë·ªß t√†i li·ªáu.',
    priority: 'high'
  },
  {
    id: '3',
    category: 'technique',
    title: 'Ph∆∞∆°ng ph√°p Feynman',
    description: 'Gi·∫£i th√≠ch ki·∫øn th·ª©c b·∫±ng ng√¥n ng·ªØ ƒë∆°n gi·∫£n nh∆∞ d·∫°y cho ng∆∞·ªùi kh√°c.',
    priority: 'medium'
  },
  {
    id: '4',
    category: 'motivation',
    title: 'ƒê·∫∑t m·ª•c ti√™u nh·ªè',
    description: 'Chia nhi·ªám v·ª• l·ªõn th√†nh c√°c m·ª•c ti√™u nh·ªè, d·ªÖ ƒë·∫°t ƒë∆∞·ª£c.',
    priority: 'medium'
  },
  {
    id: '5',
    category: 'time-management',
    title: 'Ma tr·∫≠n Eisenhower',
    description: '∆Øu ti√™n c√¥ng vi·ªác theo: Kh·∫©n c·∫•p-Quan tr·ªçng, Quan tr·ªçng-Kh√¥ng kh·∫©n c·∫•p...',
    priority: 'medium'
  }
];

export function AIStudyAssistant() {
  const { events } = useEventStore();
  const [isAIOpen, setIsAIOpen] = useState(false);
  const [messages, setMessages] = useState<AIAssistantMessage[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedTips, setSelectedTips] = useState<StudyTip[]>([]);

  const form = useForm({
    initialValues: {
      message: ''
    }
  });

  // Generate AI responses (simulated)
  const generateAIResponse = async (userMessage: string): Promise<string> => {
    await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate API call
    
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('h·ªçc') || lowerMessage.includes('t·∫≠p trung')) {
      return 'ƒê·ªÉ h·ªçc hi·ªáu qu·∫£ h∆°n, t√¥i khuy√™n b·∫°n n√™n:\n\n1. S·ª≠ d·ª•ng k·ªπ thu·∫≠t Pomodoro (25 ph√∫t h·ªçc + 5 ph√∫t ngh·ªâ)\n2. T·∫°o m√¥i tr∆∞·ªùng y√™n tƒ©nh, t·∫Øt th√¥ng b√°o\n3. ƒê·∫∑t m·ª•c ti√™u c·ª• th·ªÉ cho m·ªói phi√™n h·ªçc\n4. D√πng ph∆∞∆°ng ph√°p Active Recall ƒë·ªÉ ki·ªÉm tra ki·∫øn th·ª©c\n\nB·∫°n mu·ªën t√¥i t·∫°o l·ªãch h·ªçc chi ti·∫øt kh√¥ng?';
    }
    
    if (lowerMessage.includes('th·ªùi gian') || lowerMessage.includes('l·ªãch tr√¨nh')) {
      return 'V·ªÅ qu·∫£n l√Ω th·ªùi gian, t√¥i suggest:\n\n1. L·∫≠p danh s√°ch c√¥ng vi·ªác ∆∞u ti√™n h√†ng ng√†y\n2. S·ª≠ d·ª•ng ma tr·∫≠n Eisenhower ƒë·ªÉ ph√¢n lo·∫°i task\n3. D√†nh 80% th·ªùi gian cho vi·ªác quan tr·ªçng\n4. Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß ƒë·ªÉ duy tr√¨ hi·ªáu su·∫•t\n\nT√¥i c√≥ th·ªÉ ph√¢n t√≠ch l·ªãch tr√¨nh hi·ªán t·∫°i c·ªßa b·∫°n n·∫øu c·∫ßn!';
    }
    
    if (lowerMessage.includes('ƒë·ªông l·ª±c') || lowerMessage.includes('stress')) {
      return 'ƒê·ªÉ duy tr√¨ ƒë·ªông l·ª±c h·ªçc t·∫≠p:\n\n1. ƒê·∫∑t m·ª•c ti√™u ng·∫Øn h·∫°n v√† khen th∆∞·ªüng b·∫£n th√¢n\n2. T√¨m partner h·ªçc t·∫≠p ƒë·ªÉ t·∫°o accountability\n3. Visualize th√†nh c√¥ng v√† l·ª£i √≠ch l√¢u d√†i\n4. Th·ª±c h√†nh mindfulness khi stress\n\nH√£y nh·ªõ r·∫±ng ti·∫øn b·ªô nh·ªè m·ªói ng√†y s·∫Ω t·∫°o n√™n thay ƒë·ªïi l·ªõn!';
    }
    
    if (lowerMessage.includes('thi') || lowerMessage.includes('ki·ªÉm tra')) {
      return 'Chu·∫©n b·ªã thi hi·ªáu qu·∫£:\n\n1. L·∫≠p k·∫ø ho·∫°ch √¥n t·∫≠p chi ti·∫øt 2-3 tu·∫ßn tr∆∞·ªõc\n2. S·ª≠ d·ª•ng flashcards v√† practice tests\n3. H·ªçc nh√≥m ƒë·ªÉ th·∫£o lu·∫≠n c√¢u kh√≥\n4. ƒê·∫£m b·∫£o ng·ªß ƒë·ªß gi·∫•c tr∆∞·ªõc ng√†y thi\n\nB·∫°n c√≥ mu·ªën t√¥i t·∫°o schedule √¥n t·∫≠p c·ª• th·ªÉ kh√¥ng?';
    }
    
    return 'C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! T√¥i l√† AI Assistant chuy√™n h·ªó tr·ª£ h·ªçc t·∫≠p. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p hi·ªáu qu·∫£\n‚Ä¢ T∆∞ v·∫•n k·ªπ thu·∫≠t ghi nh·ªõ\n‚Ä¢ Qu·∫£n l√Ω th·ªùi gian v√† stress\n‚Ä¢ T·ªëi ∆∞u h√≥a m√¥i tr∆∞·ªùng h·ªçc\n\nH√£y cho t√¥i bi·∫øt b·∫°n ƒëang g·∫∑p kh√≥ khƒÉn g√¨ trong vi·ªác h·ªçc nh√©!';
  };

  const handleSendMessage = async (values: typeof form.values) => {
    if (!values.message.trim()) return;

    const userMessage: AIAssistantMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: values.message,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    form.reset();
    setIsLoading(true);

    try {
      const response = await generateAIResponse(values.message);
      
      const aiMessage: AIAssistantMessage = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: response,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiMessage]);
      
      // Update study tips based on conversation
      updateStudyTips(values.message);
      
    } catch (error) {
      notifications.show({
        title: 'L·ªói',
        message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi AI Assistant. Vui l√≤ng th·ª≠ l·∫°i.',
        color: 'red'
      });
    } finally {
      setIsLoading(false);
    }
  };

  const updateStudyTips = (userMessage: string) => {
    const lowerMessage = userMessage.toLowerCase();
    let relevantTips: StudyTip[] = [];

    if (lowerMessage.includes('th·ªùi gian') || lowerMessage.includes('l·ªãch')) {
      relevantTips = STUDY_TIPS.filter(tip => tip.category === 'time-management');
    } else if (lowerMessage.includes('t·∫≠p trung') || lowerMessage.includes('focus')) {
      relevantTips = STUDY_TIPS.filter(tip => tip.category === 'focus');
    } else if (lowerMessage.includes('ƒë·ªông l·ª±c') || lowerMessage.includes('stress')) {
      relevantTips = STUDY_TIPS.filter(tip => tip.category === 'motivation');
    } else {
      relevantTips = STUDY_TIPS.filter(tip => tip.category === 'technique');
    }

    setSelectedTips(relevantTips.slice(0, 2));
  };

  const getProductivityInsights = () => {
    const completedToday = events.filter(e => 
      dayjs(e.startTime).isSame(dayjs(), 'day') && e.status === 'done'
    ).length;
    
    const totalToday = events.filter(e => 
      dayjs(e.startTime).isSame(dayjs(), 'day')
    ).length;

    const completionRate = totalToday > 0 ? (completedToday / totalToday) * 100 : 0;

    return {
      completedToday,
      totalToday,
      completionRate
    };
  };

  const insights = getProductivityInsights();

  const getCategoryColor = (category: StudyTip['category']) => {
    switch (category) {
      case 'time-management': return 'blue';
      case 'focus': return 'green';
      case 'motivation': return 'orange';
      case 'technique': return 'purple';
      default: return 'gray';
    }
  };

  return (
    <Paper withBorder p="md" radius="md">
      <Stack gap="md">
        {/* Header */}
        <Group justify="space-between">
          <Group>
            <IconRobot size={24} color="#228be6" />
            <Title order={3}>ü§ñ AI Study Assistant</Title>
          </Group>
          
          <Button
            leftSection={<IconBrain size={16} />}
            onClick={() => setIsAIOpen(true)}
            variant="light"
          >
            Chat v·ªõi AI
          </Button>
        </Group>

        {/* Today's Insights */}
        <Card withBorder p="md" radius="md">
          <Stack gap="md">
            <Group>
              <IconTarget size={20} color="#40c057" />
              <Text fw={500}>Ti·∫øn ƒë·ªô h√¥m nay</Text>
            </Group>
            
            <Group justify="space-between">
              <Text size="sm">
                {insights.completedToday} / {insights.totalToday} nhi·ªám v·ª•
              </Text>
              <Text size="sm" fw={500}>
                {insights.completionRate.toFixed(1)}%
              </Text>
            </Group>
            
            <Progress 
              value={insights.completionRate} 
              color={insights.completionRate >= 80 ? 'green' : insights.completionRate >= 60 ? 'yellow' : 'red'}
              size="lg"
              radius="xl"
            />
            
            <Text size="sm" c="dimmed" ta="center">
              {insights.completionRate >= 80 
                ? 'üéâ Tuy·ªát v·ªùi! B·∫°n ƒëang r·∫•t productive!'
                : insights.completionRate >= 60
                ? 'üëç T·ªët l·∫Øm! C·ªë g·∫Øng th√™m m·ªôt ch√∫t n·ªØa!'
                : 'üí™ H√£y b·∫Øt ƒë·∫ßu v·ªõi m·ªôt nhi·ªám v·ª• nh·ªè!'
              }
            </Text>
          </Stack>
        </Card>

        {/* Quick Study Tips */}
        {selectedTips.length > 0 && (
          <Stack gap="md">
            <Group>
              <IconBulb size={20} color="#ffd43b" />
              <Text fw={500}>üí° G·ª£i √Ω h·ªçc t·∫≠p</Text>
            </Group>
            
            {selectedTips.map(tip => (
              <Alert key={tip.id} color={getCategoryColor(tip.category)} variant="light">
                <Stack gap="xs">
                  <Group justify="space-between">
                    <Text size="sm" fw={500}>{tip.title}</Text>
                    <Badge size="xs" color={getCategoryColor(tip.category)}>
                      {tip.category}
                    </Badge>
                  </Group>
                  <Text size="sm">{tip.description}</Text>
                </Stack>
              </Alert>
            ))}
          </Stack>
        )}

        {/* AI Chat Modal */}
        <Modal
          opened={isAIOpen}
          onClose={() => setIsAIOpen(false)}
          title="ü§ñ AI Study Assistant"
          size="lg"
        >
          <Stack gap="md" h={400}>
            {/* Chat Messages */}
            <Box style={{ flex: 1, overflowY: 'auto', maxHeight: '300px' }} p="sm">
              {messages.length === 0 ? (
                <Alert icon={<IconBrain size={16} />} color="blue">
                  Xin ch√†o! T√¥i l√† AI Assistant h·ªçc t·∫≠p. H√£y h·ªèi t√¥i v·ªÅ:
                  <br />‚Ä¢ K·ªπ thu·∫≠t h·ªçc hi·ªáu qu·∫£
                  <br />‚Ä¢ Qu·∫£n l√Ω th·ªùi gian
                  <br />‚Ä¢ T·∫°o ƒë·ªông l·ª±c h·ªçc t·∫≠p
                  <br />‚Ä¢ Chu·∫©n b·ªã thi c·ª≠
                </Alert>
              ) : (
                <Stack gap="md">
                  {messages.map(message => (
                    <Card 
                      key={message.id} 
                      p="sm" 
                      radius="md"
                      style={{ 
                        alignSelf: message.type === 'user' ? 'flex-end' : 'flex-start',
                        maxWidth: '85%',
                        backgroundColor: message.type === 'user' ? '#e3f2fd' : '#f5f5f5'
                      }}
                    >
                      <Stack gap="xs">
                        <Text size="sm" style={{ whiteSpace: 'pre-line' }}>
                          {message.content}
                        </Text>
                        <Text size="xs" c="dimmed">
                          {dayjs(message.timestamp).format('HH:mm')}
                        </Text>
                      </Stack>
                    </Card>
                  ))}
                  
                  {isLoading && (
                    <Card p="sm" radius="md" style={{ alignSelf: 'flex-start', maxWidth: '85%' }}>
                      <Group gap="xs">
                        <Loader size="xs" />
                        <Text size="sm" c="dimmed">AI ƒëang suy nghƒ©...</Text>
                      </Group>
                    </Card>
                  )}
                </Stack>
              )}
            </Box>

            <Divider />

            {/* Message Input */}
            <form onSubmit={form.onSubmit(handleSendMessage)}>
              <Group gap="xs">
                <TextInput
                  placeholder="H·ªèi AI v·ªÅ k·ªπ thu·∫≠t h·ªçc t·∫≠p, qu·∫£n l√Ω th·ªùi gian..."
                  style={{ flex: 1 }}
                  {...form.getInputProps('message')}
                  disabled={isLoading}
                />
                <ActionIcon 
                  type="submit" 
                  size="lg" 
                  variant="filled"
                  disabled={isLoading || !form.values.message.trim()}
                >
                  <IconSend size={16} />
                </ActionIcon>
              </Group>
            </form>
          </Stack>
        </Modal>

        {/* Quick Actions */}
        <Group justify="center" gap="xs">
          <Button 
            size="xs" 
            variant="light"
            onClick={() => {
              setIsAIOpen(true);
              form.setValues({ message: 'L√†m sao ƒë·ªÉ t√¥i t·∫≠p trung h·ªçc t·ªët h∆°n?' });
            }}
          >
            C·∫£i thi·ªán t·∫≠p trung
          </Button>
          <Button 
            size="xs" 
            variant="light"
            onClick={() => {
              setIsAIOpen(true);
              form.setValues({ message: 'T√¥i c·∫ßn l·∫≠p k·∫ø ho·∫°ch h·ªçc hi·ªáu qu·∫£' });
            }}
          >
            L·∫≠p k·∫ø ho·∫°ch
          </Button>
          <Button 
            size="xs" 
            variant="light"
            onClick={() => {
              setIsAIOpen(true);
              form.setValues({ message: 'L√†m th·∫ø n√†o ƒë·ªÉ duy tr√¨ ƒë·ªông l·ª±c h·ªçc?' });
            }}
          >
            TƒÉng ƒë·ªông l·ª±c
          </Button>
        </Group>
      </Stack>
    </Paper>
  );
}

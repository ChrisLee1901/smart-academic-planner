interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string;
      }>;
    };
  }>;
}

interface StudyContext {
  userMessage: string;
  completedTasks: number;
  totalTasks: number;
  currentTime: string;
  recentTopics?: string[];
}

export class GeminiService {
  private readonly apiKey = 'AIzaSyBD9JIWh_SaMMrv_rJCoKJ3qJwJ1Yi6b8Q';
  private readonly baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
  private isAvailable = true;

  // Prompt templates cho c√°c t√¨nh hu·ªëng kh√°c nhau
  private getSystemPrompt(context: StudyContext): string {
    return `B·∫°n l√† AI Study Assistant chuy√™n nghi·ªáp h·ªó tr·ª£ h·ªçc t·∫≠p ti·∫øng Vi·ªát. 

NGUY√äN T·∫ÆC TR·∫¢ L·ªúI:
- Tr·∫£ l·ªùi ng·∫Øn g·ªçn, x√∫c t√≠ch nh∆∞ng ƒë·ªß √Ω
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát th√¢n thi·ªán, d·ªÖ hi·ªÉu
- ƒê∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø, c√≥ th·ªÉ √°p d·ª•ng ngay
- C√≥ c·∫•u tr√∫c r√µ r√†ng v·ªõi ƒë√°nh s·ªë (1. 2. 3.) 
- KH√îNG s·ª≠ d·ª•ng d·∫•u *, **, markdown hay bullet points
- S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o ƒëi·ªÉm nh·∫•n
- Khuy·∫øn kh√≠ch v√† t√≠ch c·ª±c

FORMAT TR·∫¢ L·ªúI:
- D√πng ƒë√°nh s·ªë (1. 2. 3.) thay v√¨ d·∫•u *
- Xu·ªëng d√≤ng r√µ r√†ng gi·ªØa c√°c √Ω
- D√πng emoji üéØ üí° ‚ö° üåü ƒë·ªÉ l√†m n·ªïi b·∫≠t
- K·∫øt th√∫c b·∫±ng l·ªùi khuy·∫øn kh√≠ch

CONTEXT HI·ªÜN T·∫†I:
- Th·ªùi gian: ${context.currentTime}
- Ti·∫øn ƒë·ªô h√¥m nay: ${context.completedTasks}/${context.totalTasks} nhi·ªám v·ª•
- T·ª∑ l·ªá ho√†n th√†nh: ${context.totalTasks > 0 ? ((context.completedTasks / context.totalTasks) * 100).toFixed(1) : 0}%

H√ÉY TR·∫¢ L·ªúI C√ÇU H·ªéI SAU:`;
  }

  private getPromptTemplate(userMessage: string, context: StudyContext): string {
    const lowerMessage = userMessage.toLowerCase();
    let specificPrompt = '';

    if (lowerMessage.includes('h·ªçc') || lowerMessage.includes('t·∫≠p trung') || lowerMessage.includes('hi·ªáu qu·∫£')) {
      specificPrompt = `
Ng∆∞·ªùi d√πng h·ªèi v·ªÅ k·ªπ thu·∫≠t h·ªçc t·∫≠p. H√£y ƒë∆∞a ra:
1. K·ªπ thu·∫≠t h·ªçc hi·ªáu qu·∫£ c·ª• th·ªÉ (2-3 k·ªπ thu·∫≠t)
2. C√°ch √°p d·ª•ng ngay h√¥m nay
3. M·∫πo ƒë·ªÉ duy tr√¨ ƒë·ªông l·ª±c

ƒê·ªäNH D·∫†NG: S·ª≠ d·ª•ng s·ªë th·ª© t·ª± (1. 2. 3.) v√† emoji. Kh√¥ng d√πng d·∫•u * hay **
C√¢u h·ªèi: "${userMessage}"`;
    } else if (lowerMessage.includes('th·ªùi gian') || lowerMessage.includes('l·ªãch') || lowerMessage.includes('k·∫ø ho·∫°ch')) {
      specificPrompt = `
Ng∆∞·ªùi d√πng c·∫ßn h·ªó tr·ª£ qu·∫£n l√Ω th·ªùi gian. H√£y ƒë∆∞a ra:
1. Ph∆∞∆°ng ph√°p ∆∞u ti√™n c√¥ng vi·ªác
2. C√°ch l·∫≠p l·ªãch h·ªçc hi·ªáu qu·∫£
3. Balance gi·ªØa h·ªçc v√† ngh·ªâ ng∆°i

ƒê·ªäNH D·∫†NG: S·ª≠ d·ª•ng s·ªë th·ª© t·ª± (1. 2. 3.) v√† emoji. Kh√¥ng d√πng d·∫•u * hay **
C√¢u h·ªèi: "${userMessage}"`;
    } else if (lowerMessage.includes('ƒë·ªông l·ª±c') || lowerMessage.includes('stress') || lowerMessage.includes('√°p l·ª±c')) {
      specificPrompt = `
Ng∆∞·ªùi d√πng c·∫ßn h·ªó tr·ª£ v·ªÅ t√¢m l√Ω h·ªçc t·∫≠p. H√£y ƒë∆∞a ra:
1. C√°ch x√¢y d·ª±ng ƒë·ªông l·ª±c b·ªÅn v·ªØng
2. K·ªπ thu·∫≠t gi·∫£m stress hi·ªáu qu·∫£
3. Mindset t√≠ch c·ª±c cho vi·ªác h·ªçc

ƒê·ªäNH D·∫†NG: S·ª≠ d·ª•ng s·ªë th·ª© t·ª± (1. 2. 3.) v√† emoji. Kh√¥ng d√πng d·∫•u * hay **
C√¢u h·ªèi: "${userMessage}"`;
    } else if (lowerMessage.includes('thi') || lowerMessage.includes('ki·ªÉm tra') || lowerMessage.includes('√¥n t·∫≠p')) {
      specificPrompt = `
Ng∆∞·ªùi d√πng c·∫ßn chu·∫©n b·ªã thi c·ª≠. H√£y ƒë∆∞a ra:
1. Chi·∫øn l∆∞·ª£c √¥n t·∫≠p hi·ªáu qu·∫£
2. K·ªπ thu·∫≠t ghi nh·ªõ l√¢u d√†i
3. C√°ch qu·∫£n l√Ω lo l·∫Øng tr∆∞·ªõc thi

ƒê·ªäNH D·∫†NG: S·ª≠ d·ª•ng s·ªë th·ª© t·ª± (1. 2. 3.) v√† emoji. Kh√¥ng d√πng d·∫•u * hay **
C√¢u h·ªèi: "${userMessage}"`;
    } else if (lowerMessage.includes('nh·ªõ') || lowerMessage.includes('ghi nh·ªõ') || lowerMessage.includes('memory')) {
      specificPrompt = `
Ng∆∞·ªùi d√πng mu·ªën c·∫£i thi·ªán kh·∫£ nƒÉng ghi nh·ªõ. H√£y ƒë∆∞a ra:
1. K·ªπ thu·∫≠t ghi nh·ªõ hi·ªáu qu·∫£ (spaced repetition, mnemonics...)
2. C√°ch t·ªëi ∆∞u n√£o b·ªô cho vi·ªác h·ªçc
3. Th√≥i quen h√†ng ng√†y tƒÉng tr√≠ nh·ªõ

ƒê·ªäNH D·∫†NG: S·ª≠ d·ª•ng s·ªë th·ª© t·ª± (1. 2. 3.) v√† emoji. Kh√¥ng d√πng d·∫•u * hay **
C√¢u h·ªèi: "${userMessage}"`;
    } else {
      specificPrompt = `
Ng∆∞·ªùi d√πng c√≥ c√¢u h·ªèi chung v·ªÅ h·ªçc t·∫≠p. H√£y:
1. Ph√¢n t√≠ch v·∫•n ƒë·ªÅ h·ªç ƒëang g·∫∑p
2. ƒê∆∞a ra gi·∫£i ph√°p c·ª• th·ªÉ v√† th·ª±c t·∫ø
3. Khuy·∫øn kh√≠ch h·ªç h√†nh ƒë·ªông

ƒê·ªäNH D·∫†NG: S·ª≠ d·ª•ng s·ªë th·ª© t·ª± (1. 2. 3.) v√† emoji. Kh√¥ng d√πng d·∫•u * hay **
C√¢u h·ªèi: "${userMessage}"`;
    }

    return `${this.getSystemPrompt(context)}\n${specificPrompt}

V√ç D·ª§ FORMAT MONG MU·ªêN:
üéØ C·∫£i thi·ªán t·∫≠p trung h·ªçc t·∫≠p

1. K·ªπ thu·∫≠t Pomodoro: H·ªçc 25 ph√∫t, ngh·ªâ 5 ph√∫t
2. M√¥i tr∆∞·ªùng y√™n tƒ©nh: T·∫Øt th√¥ng b√°o, d·ªçn d·∫πp b√†n h·ªçc
3. M·ª•c ti√™u r√µ r√†ng: ƒê·∫∑t target c·ª• th·ªÉ cho m·ªói bu·ªïi h·ªçc

V·ªõi ti·∫øn ƒë·ªô hi·ªán t·∫°i, b·∫°n ƒëang l√†m r·∫•t t·ªët! H√£y √°p d·ª•ng ngay h√¥m nay nh√©! üí™

H√ÉY TR·∫¢ L·ªúI THEO FORMAT T∆Ø∆†NG T·ª∞.`;
  }

  async generateResponse(userMessage: string, context: StudyContext): Promise<string> {
    if (!this.isAvailable) {
      throw new Error('Gemini API kh√¥ng kh·∫£ d·ª•ng');
    }

    try {
      const prompt = this.getPromptTemplate(userMessage, context);
      
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-goog-api-key': this.apiKey
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: prompt
                }
              ]
            }
          ],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 800
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH", 
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        })
      });

      if (!response.ok) {
        if (response.status === 403 || response.status === 401) {
          this.isAvailable = false;
          throw new Error('API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt quota');
        }
        if (response.status === 429) {
          throw new Error('ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API, vui l√≤ng th·ª≠ l·∫°i sau');
        }
        throw new Error(`API error: ${response.status}`);
      }

      const data: GeminiResponse = await response.json();
      
      if (!data.candidates || data.candidates.length === 0) {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI');
      }

      const aiResponse = data.candidates[0].content.parts[0].text;
      
      // Clean up any markdown formatting that might slip through
      const cleanedResponse = aiResponse
        .replace(/\*\*(.*?)\*\*/g, '$1') // Remove **bold**
        .replace(/\*(.*?)\*/g, '$1')     // Remove *italic*
        .replace(/^[\s]*\*[\s]*/gm, '')  // Remove bullet points at start of lines
        .replace(/^[\s]*-[\s]*/gm, '')   // Remove dash bullet points
        .trim();
      
      return cleanedResponse;

    } catch (error) {
      if (error instanceof Error) {
        // N·∫øu l√† l·ªói m·∫°ng ho·∫∑c API kh√¥ng kh·∫£ d·ª•ng, ƒë√°nh d·∫•u service kh√¥ng kh·∫£ d·ª•ng
        if (error.message.includes('fetch') || error.message.includes('network')) {
          this.isAvailable = false;
        }
        throw error;
      }
      throw new Error('L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi Gemini API');
    }
  }

  // Fallback AI response (logic c≈©)
  generateFallbackResponse(userMessage: string, context: StudyContext): string {
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('h·ªçc') || lowerMessage.includes('t·∫≠p trung')) {
      return `üéØ H·ªçc hi·ªáu qu·∫£ h∆°n

1. K·ªπ thu·∫≠t Pomodoro: 25 ph√∫t h·ªçc + 5 ph√∫t ngh·ªâ
2. M√¥i tr∆∞·ªùng: T·∫Øt th√¥ng b√°o, chu·∫©n b·ªã ƒë·ªß t√†i li·ªáu  
3. M·ª•c ti√™u r√µ r√†ng: ƒê·∫∑t target c·ª• th·ªÉ cho m·ªói phi√™n
4. Active Recall: T·ª± ki·ªÉm tra ki·∫øn th·ª©c thay v√¨ ch·ªâ ƒë·ªçc l·∫°i

V·ªõi ti·∫øn ƒë·ªô ${context.completedTasks}/${context.totalTasks} h√¥m nay, b·∫°n ƒëang l√†m r·∫•t t·ªët! üí™`;
    }
    
    if (lowerMessage.includes('th·ªùi gian') || lowerMessage.includes('l·ªãch tr√¨nh')) {
      return `‚è∞ Qu·∫£n l√Ω th·ªùi gian hi·ªáu qu·∫£

1. Ma tr·∫≠n Eisenhower: Ph√¢n lo·∫°i urgent/important
2. Time blocking: D√†nh khung gi·ªù c·ªë ƒë·ªãnh cho t·ª´ng m√¥n
3. Rule 80/20: 80% th·ªùi gian cho vi·ªác quan tr·ªçng nh·∫•t
4. Buffer time: ƒê·ªÉ 15-20% th·ªùi gian d·ª± ph√≤ng

G·ª£i √Ω: V·ªõi ${((context.completedTasks/context.totalTasks)*100).toFixed(0)}% ho√†n th√†nh, h√£y t·∫≠p trung v√†o 2-3 task ∆∞u ti√™n! üéØ`;
    }
    
    if (lowerMessage.includes('ƒë·ªông l·ª±c') || lowerMessage.includes('stress')) {
      return `üåü Duy tr√¨ ƒë·ªông l·ª±c & gi·∫£m stress

1. M·ª•c ti√™u nh·ªè: Chia task l·ªõn th√†nh milestone nh·ªè
2. Reward system: T·ª± th∆∞·ªüng khi ho√†n th√†nh m·ª•c ti√™u
3. Study buddy: T√¨m b·∫°n h·ªçc c√πng ƒë·ªÉ t·∫°o accountability  
4. Mindfulness: 5 ph√∫t thi·ªÅn/th·ªü s√¢u khi cƒÉng th·∫≥ng

Remember: Ti·∫øn b·ªô nh·ªè m·ªói ng√†y = Th√†nh c√¥ng l·ªõn! üí´`;
    }
    
    if (lowerMessage.includes('thi') || lowerMessage.includes('ki·ªÉm tra')) {
      return `üìö Chu·∫©n b·ªã thi hi·ªáu qu·∫£

1. Planning: L·∫≠p k·∫ø ho·∫°ch √¥n 2-3 tu·∫ßn tr∆∞·ªõc
2. Practice tests: L√†m ƒë·ªÅ thi th·ª≠ th∆∞·ªùng xuy√™n
3. Spaced repetition: √în l·∫°i theo chu k·ª≥ 1-3-7-21 ng√†y
4. Sleep & nutrition: Ng·ªß ƒë·ªß 7-8h, ƒÉn u·ªëng ƒëi·ªÅu ƒë·ªô

Tip: T·∫°o checklist v√† tick off t·ª´ng ph·∫ßn ƒë√£ √¥n xong! ‚úÖ`;
    }
    
    return `ü§ñ AI Study Assistant

T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ:

1. K·ªπ thu·∫≠t h·ªçc t·∫≠p hi·ªáu qu·∫£
2. Qu·∫£n l√Ω th·ªùi gian v√† l·∫≠p k·∫ø ho·∫°ch  
3. T·∫°o ƒë·ªông l·ª±c v√† gi·∫£m stress
4. Chu·∫©n b·ªã thi c·ª≠ strategic

Hi·ªán t·∫°i b·∫°n ƒë√£ ho√†n th√†nh ${context.completedTasks}/${context.totalTasks} task. H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn h·ªó tr·ª£ g√¨ c·ª• th·ªÉ nh√©! üòä`;
  }

  // Check if Gemini API is available
  isGeminiAvailable(): boolean {
    return this.isAvailable;
  }

  // Reset availability status (for retry)
  resetAvailability(): void {
    this.isAvailable = true;
  }
}

// Export singleton instance
export const geminiService = new GeminiService();